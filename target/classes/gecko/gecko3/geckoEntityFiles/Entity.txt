import net.minecraft.block.BlockState;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.ai.goal.ActiveTargetGoal;
import net.minecraft.entity.ai.goal.AttackGoal;
import net.minecraft.entity.attribute.DefaultAttributeContainer;
import net.minecraft.entity.attribute.EntityAttributes;
import net.minecraft.entity.damage.DamageSource;
import net.minecraft.entity.passive.AnimalEntity;
import net.minecraft.entity.passive.ChickenEntity;
import net.minecraft.entity.passive.PassiveEntity;
import net.minecraft.entity.ai.goal.LookAroundGoal;
import net.minecraft.entity.ai.goal.WanderAroundFarGoal;
import net.minecraft.entity.mob.HostileEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.sound.SoundEvent;
import net.minecraft.sound.SoundEvents;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import org.jetbrains.annotations.Nullable;
import software.bernie.geckolib3.core.IAnimatable;
import software.bernie.geckolib3.core.PlayState;
import software.bernie.geckolib3.core.builder.AnimationBuilder;
import software.bernie.geckolib3.core.controller.AnimationController;
import software.bernie.geckolib3.core.event.predicate.AnimationEvent;
import software.bernie.geckolib3.core.manager.AnimationData;
import software.bernie.geckolib3.core.manager.AnimationFactory;

public class ProperEntityName extends HostileOrAnimal implements IAnimatable {

    private AnimationFactory factory = new AnimationFactory(this);

    public ProperEntityName(EntityType<? extends HostileOrAnimal> entityType, World world) {
        super(entityType, world);
    }

    OnlyIfPassiveEntity

    public static DefaultAttributeContainer.Builder setAttributes() {
        return HostileOrAnimal.createMobAttributes()
                .add(EntityAttributes.GENERIC_MAX_HEALTH, MaxHealthAttf)
                .add(EntityAttributes.GENERIC_FOLLOW_RANGE, FollowRangeAttf)
                .add(EntityAttributes.GENERIC_KNOCKBACK_RESISTANCE, KbResAttf)
                .add(EntityAttributes.GENERIC_MOVEMENT_SPEED, MovementSpeedAttf)
                .add(EntityAttributes.GENERIC_ATTACK_DAMAGE, AttackDamageAttf)
                .add(EntityAttributes.GENERIC_ARMOR, ArmorAttf)
                .add(EntityAttributes.GENERIC_ATTACK_KNOCKBACK, AttackKbAttf);
    }

    InitGoals

    private <E extends IAnimatable> PlayState predicate(AnimationEvent<E> event) {
        if (event.isMoving()) {
            event.getController().setAnimation(new AnimationBuilder().loop("ProperEntityAnimationMovement"));
            return PlayState.CONTINUE;
        }

        event.getController().setAnimation(new AnimationBuilder().loop("ProperEntityAnimationIdle"));
        return PlayState.CONTINUE;
    }


    @Override
    public void registerControllers(AnimationData animationData) {
        animationData.addAnimationController(new AnimationController(this, "controller", 0, this::predicate));
    }

    @Override
    public AnimationFactory getFactory() {
        return factory;
    }

    @Override
    protected SoundEvent getAmbientSound() {
        return SoundEvents.ENTITY_PIG_STEP;
    }

    @Override
    protected SoundEvent getHurtSound(DamageSource source) {
        return SoundEvents.ENTITY_PIG_HURT;
    }

    @Override
    protected SoundEvent getDeathSound() {
        return SoundEvents.ENTITY_PIG_DEATH;
    }

    @Override
    protected void playStepSound(BlockPos pos, BlockState state) {
        this.playSound(SoundEvents.ENTITY_PIG_STEP, 0.15f, 1.0f);
    }
}